{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Alert","height","alert","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","to","title","aria-label","aria-current","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","disabled","length","newText","showAlert","split","reverse","join","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","filter","elements","defaultProps","App","setMode","setAlert","massage","setTimeout","cls","body","classList","remove","console","log","add","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ae6ba5ec.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About(props) {\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white'\r\n    // })\r\n    let myStyle={\r\n        color: props.mode==='dark'?'white':'#042743',\r\n        backgroundColor: props.mode==='dark'?'rgb(63 63 147)':'white'\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <h2 className=\"my-3\" style={{color:props.mode==='dark'?'white':'#042743'}}>About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n       {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <div className=\"d-flex\">\r\n                        <div className=\"bg-primary rounded mx-2\" onClick={()=>{props.toggleMode('primary')}} style={{height:'30px', width: '30px',border:'2px solid pink'}}></div>\r\n                        <div className=\"bg-danger rounded mx-2\" onClick={()=>{props.toggleMode('danger')}} style={{height:'30px', width: '30px',border:'2px solid pink'}}></div>\r\n                        <div className=\"bg-success rounded mx-2\" onClick={()=>{props.toggleMode('success')}} style={{height:'30px', width: '30px',border:'2px solid pink'}}></div>\r\n                        <div className=\"bg-warning rounded mx-2\" onClick={()=>{props.toggleMode('warning')}} style={{height:'30px', width: '30px',border:'2px solid pink'}}></div>\r\n                        <div className=\"bg-light rounded mx-2\" onClick={()=>{props.toggleMode('light')}} style={{height:'30px', width: '30px',border:'2px solid pink'}}></div>\r\n                        <div className=\"bg-dark rounded mx-2\" onClick={()=>{props.toggleMode('dark')}} style={{height:'30px', width: '30px',border:'2px solid pink'}}></div>\r\n                    </div> */}\r\n                    <div className={`form-check form-switch mx-3 text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\"  onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Toggle Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About Us'\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"Upper case was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\",\"success\");\r\n    }\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\",\"success\");\r\n    }\r\n    const handleRevClick = () => {\r\n        let newText = text.split(\"\").reverse().join(\"\");\r\n        setText(newText);\r\n        props.showAlert(\"String is Reverse\",\"success\");\r\n    }\r\n    const handleClearClick = () => {\r\n        let newText ='';\r\n        setText(newText);\r\n        props.showAlert(\"Text is Cleared\",\"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value)\r\n    }\r\n    const handleCopy = (event) =>{\r\n        var text= document.getElementById(\"myBox\")\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Copy to Clipbord\",\"success\");\r\n    }\r\n    const [text, setText] = useState('');\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color : props.mode==='dark'?'white':'black'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor : props.mode==='dark'?'rgb(63 63 147)':'white', color : props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleRevClick}>String Reverse</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}> Copy </button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color : props.mode==='dark'?'white':'black'}}>\r\n                <h2>Your text summery</h2>\r\n                <p>{text.split(\" \").filter((elements)=>{return elements.length!==0}).length} Words And , {text.length} Charaters</p>\r\n                <p>{0.008 * text.split(\" \").filter((elements)=>{return elements.length!==0}).length} Minutes to read</p>\r\n                <h2>Priview</h2>\r\n                <p>{text.length>0?text:\"Nothing To Priview\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'; \nimport './App.css';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert=(massage,type)=>{\n    setAlert({\n      msg:massage,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const removeBodyClass=()=>{\n    document.body.classList.remove('bg-primary')\n    document.body.classList.remove('bg-success')\n    document.body.classList.remove('bg-danger')\n    document.body.classList.remove('bg-warning')\n    document.body.classList.remove('bg-dark')\n    document.body.classList.remove('bg-light')\n  }\n\n  const toggleMode = (cls)=>{\n    removeBodyClass();\n    console.log(cls);\n    document.body.classList.add('bg-'+cls)\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='rgb(11, 11, 73)';\n      showAlert('Dark mode Eanble','success');\n      document.title=\"TextUtils - DarkMode\";\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert('Light mode enable','success');\n      document.title=\"TextUtils - LightMode\";\n    }\n  }\n  return (\n    <>\n    <Router>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      <Switch>\n          <Route exact path=\"/About\">\n            <About mode={mode}/>\n          </Route>\n          <Route exact path=\"/\">\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n          </Route>\n        </Switch>\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}